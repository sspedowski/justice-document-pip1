// Justice Dashboard Frontend - Clean Refactor v2025.07
// Handles login, authentication, tracker, upload/lawyer buttons, filters, stats, and persistent storage

// 1. Utility: Dynamic API URL (works local & deployed)
function getApiBaseUrl() {
  if (typeof window.API_BASE_URL !== "undefined") return window.API_BASE_URL;
  const isLocal = ["localhost", "127.0.0.1", ""].includes(window.location.hostname);
  return isLocal ? "http://localhost:3000" : "https://justice-dashboard.onrender.com";
}
const API_BASE_URL = getApiBaseUrl();

// 2. Universal event delegation for Upload and Lawyer buttons
document.addEventListener("click", (event) => {
  if (event.target?.id === "uploadBtn") alert("Upload button (delegated)");
  if (event.target?.id === "lawyerBtn") alert("Lawyer button (delegated)");
});

// 3. PDF.js status check (console only)
document.addEventListener("DOMContentLoaded", () => {
  if (typeof pdfjsLib !== "undefined") {
    console.log("‚úÖ PDF.js library loaded:", pdfjsLib.version);
  } else {
    console.error("‚ùå PDF.js library not found");
  }
});

// 4. Dashboard Auth System (Login, Logout, Auth Check)
const DashboardAuth = {
  isAuthenticated: false,
  currentUser: null,
  authToken: null,

  init() {
    return this.checkAuth();
  },

  checkAuth() {
    const saved = localStorage.getItem("justiceAuth");
    if (!saved) return false;
    try {
      const authData = JSON.parse(saved);
      const valid = authData.timestamp && (Date.now() - authData.timestamp < 24 * 60 * 60 * 1000);
      if (valid && authData.user && authData.token) {
        this.currentUser = authData.user;
        this.authToken = authData.token;
        this.isAuthenticated = true;
        return true;
      }
    } catch (e) {
      console.error("Auth parse error", e);
    }
    this.clearAuth();
    return false;
  },

  async authenticate(username, password) {
    try {
      const res = await fetch(`${API_BASE_URL}/api/login`, {
        method: "POST", headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password })
      });
      if (!res.ok) throw new Error((await res.json()).message || "Login failed");
      const data = await res.json();
      if (data.success && data.user && data.token) {
        this.currentUser = data.user;
        this.authToken = data.token;
        this.isAuthenticated = true;
        localStorage.setItem("justiceAuth", JSON.stringify({
          user: this.currentUser, token: this.authToken, timestamp: Date.now()
        }));
        return { success: true };
      }
      return { success: false, error: data.error || "Login failed" };
    } catch (e) {
      return { success: false, error: e.message };
    }
  },

  async logout() {
    try {
      if (this.authToken) {
        await fetch(`${API_BASE_URL}/api/logout`, {
          method: "POST",
          headers: { Authorization: `Bearer ${this.authToken}` }
        });
      }
    } catch (e) { /* Ignore logout errors */ }
    this.clearAuth();
    DashboardUI.renderLogin();
  },

  clearAuth() {
    this.currentUser = null;
    this.authToken = null;
    this.isAuthenticated = false;
    localStorage.removeItem("justiceAuth");
  }
};

// 5. Dashboard UI (Login, Main, Tracker, Stats, Filters, etc)
const DashboardUI = {
  renderLogin(errorMsg = "") {
    const app = document.getElementById("app");
    if (!app) return;
    app.innerHTML = `
      <div class="flex min-h-screen items-center justify-center bg-gray-100">
        <div class="bg-white rounded-xl shadow-lg p-8 w-full max-w-md">
          <div class="text-center mb-4">
            <h1 class="text-3xl font-bold text-gray-800">Justice Dashboard</h1>
            <p class="text-gray-600">Secure Legal Document Management</p>
          </div>
          <div id="loginError" class="text-red-600 text-sm mb-2 ${errorMsg ? "" : "hidden"} bg-red-50 p-3 rounded"></div>
          <form id="loginForm" class="space-y-4">
            <input id="loginUsername" type="text" placeholder="Username" required class="w-full px-3 py-2 border rounded" autofocus />
            <input id="loginPassword" type="password" placeholder="Password" required class="w-full px-3 py-2 border rounded" />
            <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded">Sign In</button>
          </form>
        </div>
      </div>
    `;
    const loginForm = document.getElementById("loginForm");
    const errorDiv = document.getElementById("loginError");
    
    if (errorMsg) {
      errorDiv.textContent = errorMsg;
      errorDiv.classList.remove('hidden');
    }
    
    loginForm.onsubmit = async (e) => {
      e.preventDefault();
      const username = document.getElementById("loginUsername").value.trim();
      const password = document.getElementById("loginPassword").value;
      const result = await DashboardAuth.authenticate(username, password);
      if (result.success) {
        this.renderDashboard();
      } else {
        errorDiv.textContent = result.error || "Invalid credentials. Try again.";
        errorDiv.classList.remove('hidden');
      }
    };
  },

  renderDashboard() {
    const app = document.getElementById("app");
    if (!app) return;
    
    // Sanitize user data to prevent XSS
    const userName = this.escapeHtml(DashboardAuth.currentUser.fullName || DashboardAuth.currentUser.username);
    
    app.innerHTML = `
      <header class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 py-3 flex justify-between items-center">
          <h1 class="text-xl font-bold text-gray-900">Justice Dashboard</h1>
          <div class="flex items-center space-x-4">
            <span class="text-sm text-gray-600">Welcome, ${userName}</span>
            <button id="logoutBtn" class="text-sm bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700">Logout</button>
          </div>
        </div>
      </header>
      <main class="max-w-4xl mx-auto p-6">
        <div class="bg-white rounded shadow p-6 mb-6">
          <h2 class="text-lg font-semibold mb-4">üìñ Daily Scripture & Prayer</h2>
          <blockquote class="bg-blue-100 p-4 italic mb-6">Proverbs 21:15 - Justice brings joy to the righteous.</blockquote>
          <textarea id="docInput" placeholder="Write your prayer here..." class="w-full border p-2 mb-6 rounded shadow"></textarea>
        </div>
        <div class="bg-white rounded shadow p-6">
          <h2 class="text-xl font-bold mb-4">Justice Dashboard</h2>
          <div class="mb-6 flex flex-wrap gap-4 justify-center">
            <input type="file" id="fileInput" accept=".pdf" multiple class="block w-full text-sm text-gray-500 file:bg-blue-50 file:text-blue-700" />
            <button id="uploadBtn" class="bg-blue-600 text-white px-4 py-2 rounded">Upload</button>
            <button id="lawyerBtn" class="bg-purple-600 text-white px-4 py-2 rounded">Lawyer</button>
          </div>
          <table id="trackerTable" class="w-full border-collapse border border-gray-300">
            <thead class="bg-gray-50"><tr>
              <th class="border p-2">Category</th>
              <th class="border p-2">Child</th>
              <th class="border p-2">Misconduct</th>
              <th class="border p-2">Summary</th>
              <th class="border p-2">File</th>
              <th class="border p-2">Actions</th>
            </tr></thead>
            <tbody id="results"></tbody>
          </table>
        </div>
      </main>
    `;
    document.getElementById("logoutBtn").onclick = () => DashboardAuth.logout();
    this.initDashboardFeatures();
  },

  // All in-dashboard logic: tracker, uploads, buttons, persistent state
  initDashboardFeatures() {
    // Example: load from localStorage
    const results = document.getElementById("results");
    const storedRows = JSON.parse(localStorage.getItem("justiceTrackerRows") || "[]");
    storedRows.forEach(row => this.addTrackerRow(row));
    // Upload and Lawyer buttons already work via delegation, just add their real logic here
    document.getElementById("uploadBtn").onclick = () => alert("Upload button works!");
    document.getElementById("lawyerBtn").onclick = () => alert("Lawyer button works!");
    // Add other dashboard initialization as needed
  },

  addTrackerRow(row) {
    const tbody = document.getElementById("results");
    if (!tbody) return;
    
    const tr = document.createElement("tr");
    
    // Create cells safely without innerHTML
    const categoryCell = document.createElement('td');
    categoryCell.textContent = row.category || '';
    
    const childCell = document.createElement('td');
    childCell.textContent = row.child || '';
    
    const misconductCell = document.createElement('td');
    misconductCell.textContent = row.misconduct || '';
    
    const summaryCell = document.createElement('td');
    summaryCell.textContent = row.summary || '';
    
    const fileCell = document.createElement('td');
    if (row.fileURL) {
      const link = document.createElement('a');
      link.href = row.fileURL;
      link.target = '_blank';
      link.className = 'text-blue-600 underline';
      link.textContent = 'View PDF';
      fileCell.appendChild(link);
    } else {
      fileCell.textContent = 'No PDF';
    }
    
    const actionCell = document.createElement('td');
    const deleteBtn = document.createElement('button');
    deleteBtn.className = 'text-red-600';
    deleteBtn.textContent = 'Delete';
    deleteBtn.onclick = () => tr.remove();
    actionCell.appendChild(deleteBtn);
    
    tr.appendChild(categoryCell);
    tr.appendChild(childCell);
    tr.appendChild(misconductCell);
    tr.appendChild(summaryCell);
    tr.appendChild(fileCell);
    tr.appendChild(actionCell);
    
    tbody.appendChild(tr);
  },

  // XSS prevention helper
  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
};

// 6. Entry point: show login or dashboard on load
document.addEventListener("DOMContentLoaded", () => {
  if (DashboardAuth.init()) {
    DashboardUI.renderDashboard();
  } else {
    DashboardUI.renderLogin();
  }
});
