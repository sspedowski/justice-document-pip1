// Enhanced Firestore Security Rules for Justice Dashboard
// Production-ready rules with comprehensive security and access control

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // USER MANAGEMENT
    // ========================================
    
    // User profiles - users can only access their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId) && isValidUserData(resource.data);
      allow create: if isOwner(userId) && isValidUserData(request.resource.data);
    }
    
    // User statistics - read-only for users, write for system
    match /user_stats/{userId} {
      allow read: if isOwner(userId);
      allow write: if isSystemUser() || isOwner(userId);
    }
    
    // User preferences and settings
    match /user_preferences/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // ========================================
    // CASE MANAGEMENT
    // ========================================
    
    // Cases with role-based access control
    match /cases/{caseId} {
      allow read: if hasAccessToCase(caseId);
      allow create: if isAuthenticated() && isValidCaseData(request.resource.data);
      allow update: if hasWriteAccessToCase(caseId) && isValidCaseUpdate(request.resource.data);
      allow delete: if hasDeleteAccessToCase(caseId);
      
      // Case permissions subcollection
      match /permissions/{userId} {
        allow read: if hasAccessToCase(caseId);
        allow write: if isOwnerOfCase(caseId) || isAdmin();
      }
      
      // Case activity logs
      match /activity/{activityId} {
        allow read: if hasAccessToCase(caseId);
        allow create: if hasWriteAccessToCase(caseId);
        allow update, delete: if false; // Activity logs are immutable
      }
      
      // Case documents
      match /documents/{documentId} {
        allow read: if hasAccessToCase(caseId);
        allow create: if hasWriteAccessToCase(caseId) && isValidDocumentData(request.resource.data);
        allow update: if hasWriteAccessToCase(caseId);
        allow delete: if hasDeleteAccessToCase(caseId);
      }
    }
    
    // ========================================
    // DOCUMENT ANALYSIS
    // ========================================
    
    // Document analysis results
    match /document_analysis/{analysisId} {
      allow read: if isOwnerOfAnalysis(analysisId) || isSharedWithUser(analysisId) || isAdmin();
      allow create: if isAuthenticated() && isValidAnalysisData(request.resource.data);
      allow update: if isOwnerOfAnalysis(analysisId) || isSystemUser();
      allow delete: if isOwnerOfAnalysis(analysisId) || isAdmin();
    }
    
    // Legal statutes database (read-only for users)
    match /legal_statutes/{statuteId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isSystemUser();
    }
    
    // Legal citations cache
    match /legal_citations/{citationId} {
      allow read: if isAuthenticated();
      allow write: if isSystemUser();
    }
    
    // ========================================
    // COMPLIANCE AND CHECKLISTS
    // ========================================
    
    // Compliance checklists
    match /compliance_checklists/{checklistId} {
      allow read: if isOwnerOfChecklist(checklistId) || hasSharedAccess(checklistId);
      allow create: if isAuthenticated() && isValidChecklistData(request.resource.data);
      allow update: if isOwnerOfChecklist(checklistId);
      allow delete: if isOwnerOfChecklist(checklistId) || isAdmin();
    }
    
    // Compliance templates (admin managed)
    match /compliance_templates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // ========================================
    // NOTIFICATIONS AND COMMUNICATIONS
    // ========================================
    
    // User notifications
    match /notifications/{notificationId} {
      allow read: if isOwnerOfNotification(notificationId);
      allow create: if isSystemUser() || isAdmin();
      allow update: if isOwnerOfNotification(notificationId); // For marking as read
      allow delete: if isOwnerOfNotification(notificationId) || isAdmin();
    }
    
    // System announcements
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // ========================================
    // AUDIT AND LOGGING
    // ========================================
    
    // Activity logs (system-generated, read-only for users)
    match /activity_logs/{logId} {
      allow read: if isOwnerOfLog(logId) || isAdmin();
      allow create: if isSystemUser();
      allow update, delete: if false; // Logs are immutable
    }
    
    // Audit trail (admin-only access)
    match /audit_logs/{auditId} {
      allow read: if isAdmin();
      allow create: if isSystemUser();
      allow update, delete: if false; // Audit logs are immutable
    }
    
    // System logs (admin-only)
    match /system_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // ========================================
    // SYSTEM MANAGEMENT
    // ========================================
    
    // System configuration (admin-only)
    match /system_config/{configId} {
      allow read, write: if isAdmin();
    }
    
    // Feature flags
    match /feature_flags/{flagId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Health checks (system use)
    match /health_check/{checkId} {
      allow read, write: if isSystemUser() || isAdmin();
    }
    
    // System metrics (admin dashboard)
    match /system_metrics/{metricId} {
      allow read: if isAdmin();
      allow write: if isSystemUser();
    }
    
    // ========================================
    // HELPER FUNCTIONS
    // ========================================
    
    // Authentication helpers
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token.admin == true;
    }
    
    function isSystemUser() {
      return isAuthenticated() && 
             (request.auth.token.system == true || 
              request.auth.uid.matches('.*service-account.*'));
    }
    
    // Case access helpers
    function hasAccessToCase(caseId) {
      return isAuthenticated() && 
             (isOwnerOfCase(caseId) || 
              hasPermissionToCase(caseId) || 
              isAdmin());
    }
    
    function isOwnerOfCase(caseId) {
      return exists(/databases/$(database)/documents/cases/$(caseId)) &&
             get(/databases/$(database)/documents/cases/$(caseId)).data.ownerId == request.auth.uid;
    }
    
    function hasPermissionToCase(caseId) {
      return exists(/databases/$(database)/documents/cases/$(caseId)/permissions/$(request.auth.uid));
    }
    
    function hasWriteAccessToCase(caseId) {
      return isOwnerOfCase(caseId) || 
             hasRoleInCase(caseId, ['owner', 'editor']) || 
             isAdmin();
    }
    
    function hasDeleteAccessToCase(caseId) {
      return isOwnerOfCase(caseId) || isAdmin();
    }
    
    function hasRoleInCase(caseId, allowedRoles) {
      let permission = get(/databases/$(database)/documents/cases/$(caseId)/permissions/$(request.auth.uid));
      return permission.data.role in allowedRoles;
    }
    
    // Document analysis helpers
    function isOwnerOfAnalysis(analysisId) {
      return exists(/databases/$(database)/documents/document_analysis/$(analysisId)) &&
             get(/databases/$(database)/documents/document_analysis/$(analysisId)).data.userId == request.auth.uid;
    }
    
    function isSharedWithUser(analysisId) {
      let analysis = get(/databases/$(database)/documents/document_analysis/$(analysisId));
      return analysis.data.sharedWith != null && 
             request.auth.uid in analysis.data.sharedWith;
    }
    
    // Compliance helpers
    function isOwnerOfChecklist(checklistId) {
      return exists(/databases/$(database)/documents/compliance_checklists/$(checklistId)) &&
             get(/databases/$(database)/documents/compliance_checklists/$(checklistId)).data.userId == request.auth.uid;
    }
    
    function hasSharedAccess(checklistId) {
      let checklist = get(/databases/$(database)/documents/compliance_checklists/$(checklistId));
      return checklist.data.sharedWith != null && 
             request.auth.uid in checklist.data.sharedWith;
    }
    
    // Notification helpers
    function isOwnerOfNotification(notificationId) {
      return exists(/databases/$(database)/documents/notifications/$(notificationId)) &&
             get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId == request.auth.uid;
    }
    
    // Logging helpers
    function isOwnerOfLog(logId) {
      return exists(/databases/$(database)/documents/activity_logs/$(logId)) &&
             get(/databases/$(database)/documents/activity_logs/$(logId)).data.userId == request.auth.uid;
    }
    
    // ========================================
    // DATA VALIDATION FUNCTIONS
    // ========================================
    
    function isValidUserData(data) {
      return data.keys().hasAll(['email', 'displayName']) &&
             data.email is string &&
             data.displayName is string &&
             data.email.matches('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}');
    }
    
    function isValidCaseData(data) {
      return data.keys().hasAll(['title', 'status', 'ownerId']) &&
             data.title is string &&
             data.status in ['active', 'pending', 'closed', 'archived'] &&
             data.ownerId is string &&
             data.ownerId == request.auth.uid;
    }
    
    function isValidCaseUpdate(data) {
      return data.ownerId == resource.data.ownerId; // Owner can't be changed
    }
    
    function isValidDocumentData(data) {
      return data.keys().hasAll(['name', 'uploadedBy']) &&
             data.name is string &&
             data.uploadedBy == request.auth.uid;
    }
    
    function isValidAnalysisData(data) {
      return data.keys().hasAll(['userId', 'documentUrl']) &&
             data.userId == request.auth.uid &&
             data.documentUrl is string;
    }
    
    function isValidChecklistData(data) {
      return data.keys().hasAll(['userId', 'title']) &&
             data.userId == request.auth.uid &&
             data.title is string;
    }
    
    // ========================================
    // RATE LIMITING (using request timestamps)
    // ========================================
    
    function isWithinRateLimit(collection, maxRequests, timeWindowMinutes) {
      // This is a simplified rate limiting check
      // In production, you might want to use a more sophisticated approach
      let now = request.time;
      let timeWindow = duration.value(timeWindowMinutes, 'm');
      let recentRequests = query(/databases/$(database)/documents/$(collection))
        .where('userId', '==', request.auth.uid)
        .where('timestamp', '>', now - timeWindow);
      
      return recentRequests.size() < maxRequests;
    }
  }
}

// ========================================
// STORAGE SECURITY RULES
// ========================================
// Note: This would go in storage.rules file

/*
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Public profile images
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      isValidImageFile() &&
                      resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Case documents
    match /cases/{caseId}/documents/{fileName} {
      allow read: if hasAccessToCase(caseId);
      allow write: if hasWriteAccessToCase(caseId) &&
                      isValidDocumentFile() &&
                      resource.size < 50 * 1024 * 1024; // 50MB limit
    }
    
    // Analysis documents (temporary storage)
    match /analysis/{analysisId}/{fileName} {
      allow read: if isOwnerOfAnalysis(analysisId) || isSystemUser();
      allow write: if isOwnerOfAnalysis(analysisId) || isSystemUser();
    }
    
    // System backups (admin only)
    match /backups/{fileName} {
      allow read, write: if isAdmin();
    }
    
    // Helper functions for storage
    function hasAccessToCase(caseId) {
      return firestore.exists(/databases/(default)/documents/cases/$(caseId)/permissions/$(request.auth.uid)) ||
             firestore.get(/databases/(default)/documents/cases/$(caseId)).data.ownerId == request.auth.uid;
    }
    
    function hasWriteAccessToCase(caseId) {
      let permission = firestore.get(/databases/(default)/documents/cases/$(caseId)/permissions/$(request.auth.uid));
      return permission.data.role in ['owner', 'editor'] ||
             firestore.get(/databases/(default)/documents/cases/$(caseId)).data.ownerId == request.auth.uid;
    }
    
    function isOwnerOfAnalysis(analysisId) {
      return firestore.get(/databases/(default)/documents/document_analysis/$(analysisId)).data.userId == request.auth.uid;
    }
    
    function isSystemUser() {
      return request.auth.token.system == true;
    }
    
    function isAdmin() {
      return request.auth.token.admin == true;
    }
    
    function isValidImageFile() {
      return resource.contentType.matches('image/.*');
    }
    
    function isValidDocumentFile() {
      return resource.contentType in [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'text/plain',
        'text/rtf'
      ];
    }
  }
}
*/
